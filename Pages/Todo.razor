@page "/todo"
<PageTitle>Todo</PageTitle>

<h1>Todo</h1>
@*(@todos.Count(Todo => !Todo.IsDone))*@

<ul>
    @*@for (int i = 0; i < todos.Count; i++)*@
    @foreach (var todo in todos)
    {
@*      var index = i;
        var todo = todos[index];*@
        <li>
            <input type="checkbox" @bind="todo.IsDone" />
            <input @bind="todo.Title" />
            <button @onclick="@(() => DeleteTodo(todo))">Delete</button>
            <button @onclick="@(() => RetrieveId(todo))">Retrieve ID</button>
            <button @onclick="@(() => UpdateItem(todo))">Update</button>
            @*<button @onclick="@(() => DeleteTodo(index))">Delete</button>*@
        </li>
    }
</ul> 

<input placeholder="Add a todo" @bind="newToDo"/>
<button @onclick="AddToDo">Add todo</button>

@code {
    private IEnumerable<TodoItem> todos;
    private string? newToDo;
    private CosmosRepository repo = new CosmosRepository();

    public async Task AddToDo()
    {
        if(!string.IsNullOrWhiteSpace(newToDo))
        {
            await repo.Add(new TodoItem {
                    Title = newToDo,
                    Id = Guid.NewGuid()
        });
            newToDo = string.Empty;
            todos = await repo.GetAll();
            System.Diagnostics.Debug.WriteLine("item added");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        todos = await repo.GetAll();
    }

    public async Task RetrieveId(TodoItem item)
    {
        System.Diagnostics.Debug.WriteLine("button connected");
        await repo.Retrieve(item);
    }

    public async Task UpdateItem(TodoItem item)
    {
        //System.Diagnostics.Debug.WriteLine(item.Id);
        await repo.Update(item.Id.ToString(), item);

    }


    public async Task DeleteTodo(TodoItem item)  
    {
        System.Diagnostics.Debug.WriteLine("delete button linked");
        await repo.Delete(item);
        //System.Diagnostics.Debug.WriteLine("razor Todo item with id " + item.Id + " deleted");
        todos = await repo.GetAll();
    }

}
